{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gol_acheron/probability-calculator/src/Distributions/Binomial.js\";\nimport Distribution from './Distribution';\nimport React, { Component } from 'react';\nimport NumberField from '../Components/NumberField';\nimport BarGraph from '../Components/BarGraph';\nimport { choose, factorial } from '../Libraries/Math';\nconst gr = {\n  labels: [],\n  datasets: [{\n    backgroundColor: 'rgba(75,192,192, 0.6)',\n    highlightStroke: \"rgba(220,220,220,1)\",\n    borderWidth: 0,\n    data: []\n  }]\n};\n\nclass Binomial extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeP = async function (event) {\n      await this.setState({\n        p: Number(event.target.value)\n      });\n    };\n\n    this.changeN = async function (event) {\n      await this.setState({\n        n: Number(event.target.value)\n      });\n    };\n\n    this.changeN = this.changeN.bind(this);\n    this.changeP = this.changeP.bind(this);\n    this.state = {\n      name: \"Binomial\",\n      p: 0,\n      n: 0,\n      media: 0,\n      varianza: 0,\n      desviacion: 0\n    };\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    if (prevState.p !== this.state.p || prevState.n !== this.state.n) {\n      this.setState({\n        media: this.calcularMedia(),\n        varianza: this.calcularVarianza(),\n        desviacion: this.calcularDesviacion()\n      });\n      gr.labels = Array.from(Array(this.state.n + 1).keys());\n\n      let _data = this.calcularFuncion();\n\n      gr.datasets = [{\n        backgroundColor: 'rgba(75,192,192, 0.6)',\n        highlightStroke: \"rgba(220,220,220,1)\",\n        borderWidth: 0,\n        data: _data\n      }];\n    }\n  }\n\n  calcularMedia() {\n    let result = this.state.n * this.state.p;\n    return result;\n  }\n\n  calcularVarianza() {\n    let result = this.state.n * this.state.p * (1 - this.state.p);\n    return result;\n  }\n\n  calcularDesviacion() {\n    let result = (this.state.n * this.state.p * (1 - this.state.p)) ** (1 / 2);\n    return result;\n  }\n\n  calcularFuncion() {\n    let _data = [];\n\n    for (var i = 0; i <= this.state.n; i++) {\n      let prob = this.calcularProbabilidad(i);\n\n      _data.push(Number(prob));\n    }\n\n    return _data;\n  }\n\n  calcularProbabilidad(x) {\n    let result = choose(this.state.n, x) * this.state.p ** x * (1 - this.state.p) ** (this.state.n - x);\n    return result;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NumberField, {\n        label: \"n\",\n        min: 0,\n        max: 9999999,\n        helpText: \"PoblaciÃ³n\",\n        step: \"1\",\n        handleChange: this.changeN\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n        label: \"p\",\n        min: 0,\n        max: 1,\n        step: \"0.1\",\n        helpText: \"Probabilidad\",\n        handleChange: this.changeP\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Distribution, {\n        name: this.state.name,\n        media: this.state.media,\n        varianza: this.state.varianza,\n        desviacion: this.state.desviacion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BarGraph, {\n        data: gr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Binomial;","map":{"version":3,"sources":["/home/gol_acheron/probability-calculator/src/Distributions/Binomial.js"],"names":["Distribution","React","Component","NumberField","BarGraph","choose","factorial","gr","labels","datasets","backgroundColor","highlightStroke","borderWidth","data","Binomial","constructor","props","changeP","event","setState","p","Number","target","value","changeN","n","bind","state","name","media","varianza","desviacion","componentDidUpdate","_prevProps","prevState","calcularMedia","calcularVarianza","calcularDesviacion","Array","from","keys","_data","calcularFuncion","result","i","prob","calcularProbabilidad","push","x","render"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAAQC,MAAR,EAAgBC,SAAhB,QAAgC,mBAAhC;AAEA,MAAMC,EAAE,GAAE;AACRC,EAAAA,MAAM,EAAE,EADA;AAERC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,eAAe,EAAE,uBADnB;AAEEC,IAAAA,eAAe,EAAE,qBAFnB;AAGEC,IAAAA,WAAW,EAAE,CAHf;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADQ;AAFF,CAAV;;AAWA,MAAMC,QAAN,SAAuBZ,SAAvB,CAAiC;AAC7Ba,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAMA,KAAN;;AADkB,SAqFpBC,OArFoB,GAqFV,gBAAeC,KAAf,EAAsB;AAC9B,YAAM,KAAKC,QAAL,CAAc;AAAEC,QAAAA,CAAC,EAAEC,MAAM,CAACH,KAAK,CAACI,MAAN,CAAaC,KAAd;AAAX,OAAd,CAAN;AACD,KAvFmB;;AAAA,SAyFpBC,OAzFoB,GAyFV,gBAAeN,KAAf,EAAsB;AAC9B,YAAM,KAAKC,QAAL,CAAc;AAAEM,QAAAA,CAAC,EAAEJ,MAAM,CAACH,KAAK,CAACI,MAAN,CAAaC,KAAd;AAAX,OAAd,CAAN;AACD,KA3FmB;;AAElB,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaE,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKT,OAAL,GAAe,KAAKA,OAAL,CAAaS,IAAb,CAAkB,IAAlB,CAAf;AAEA,SAAKC,KAAL,GAAW;AACTC,MAAAA,IAAI,EAAE,UADG;AAETR,MAAAA,CAAC,EAAE,CAFM;AAGTK,MAAAA,CAAC,EAAE,CAHM;AAITI,MAAAA,KAAK,EAAE,CAJE;AAKTC,MAAAA,QAAQ,EAAE,CALD;AAMTC,MAAAA,UAAU,EAAE;AANH,KAAX;AAQD;;AAEDC,EAAAA,kBAAkB,CAACC,UAAD,EAAaC,SAAb,EAAwB;AACxC,QAAIA,SAAS,CAACd,CAAV,KAAgB,KAAKO,KAAL,CAAWP,CAA3B,IAAgCc,SAAS,CAACT,CAAV,KAAgB,KAAKE,KAAL,CAAWF,CAA/D,EAAkE;AAChE,WAAKN,QAAL,CAAc;AACZU,QAAAA,KAAK,EAAE,KAAKM,aAAL,EADK;AAEZL,QAAAA,QAAQ,EAAE,KAAKM,gBAAL,EAFE;AAGZL,QAAAA,UAAU,EAAE,KAAKM,kBAAL;AAHA,OAAd;AAKA9B,MAAAA,EAAE,CAACC,MAAH,GAAY8B,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,KAAKX,KAAL,CAAWF,CAAX,GAAe,CAAhB,CAAL,CAAwBe,IAAxB,EAAX,CAAZ;;AACA,UAAIC,KAAK,GAAG,KAAKC,eAAL,EAAZ;;AAEAnC,MAAAA,EAAE,CAACE,QAAH,GAAc,CACZ;AACEC,QAAAA,eAAe,EAAE,uBADnB;AAEEC,QAAAA,eAAe,EAAE,qBAFnB;AAGEC,QAAAA,WAAW,EAAE,CAHf;AAIEC,QAAAA,IAAI,EAAE4B;AAJR,OADY,CAAd;AAQD;AACF;;AAEDN,EAAAA,aAAa,GAAG;AACd,QAAIQ,MAAM,GAAG,KAAKhB,KAAL,CAAWF,CAAX,GAAe,KAAKE,KAAL,CAAWP,CAAvC;AACA,WAAOuB,MAAP;AACD;;AAEDP,EAAAA,gBAAgB,GAAG;AACjB,QAAIO,MAAM,GAAG,KAAKhB,KAAL,CAAWF,CAAX,GAAe,KAAKE,KAAL,CAAWP,CAA1B,IAA+B,IAAE,KAAKO,KAAL,CAAWP,CAA5C,CAAb;AACA,WAAOuB,MAAP;AACD;;AAEDN,EAAAA,kBAAkB,GAAE;AAClB,QAAIM,MAAM,GAAG,CAAC,KAAKhB,KAAL,CAAWF,CAAX,GAAe,KAAKE,KAAL,CAAWP,CAA1B,IAA+B,IAAE,KAAKO,KAAL,CAAWP,CAA5C,CAAD,MAAqD,IAAE,CAAvD,CAAb;AAEA,WAAOuB,MAAP;AACD;;AAGDD,EAAAA,eAAe,GAAE;AACf,QAAID,KAAK,GAAG,EAAZ;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAKjB,KAAL,CAAWF,CAAhC,EAAmCmB,CAAC,EAApC,EAAwC;AACtC,UAAIC,IAAI,GAAG,KAAKC,oBAAL,CAA0BF,CAA1B,CAAX;;AACAH,MAAAA,KAAK,CAACM,IAAN,CAAW1B,MAAM,CAACwB,IAAD,CAAjB;AACD;;AAED,WAAOJ,KAAP;AACD;;AAEDK,EAAAA,oBAAoB,CAACE,CAAD,EAAG;AACrB,QAAIL,MAAM,GAAGtC,MAAM,CAAC,KAAKsB,KAAL,CAAWF,CAAZ,EAAeuB,CAAf,CAAN,GAA0B,KAAKrB,KAAL,CAAWP,CAAX,IAAc4B,CAAxC,GAA4C,CAAC,IAAE,KAAKrB,KAAL,CAAWP,CAAd,MAAmB,KAAKO,KAAL,CAAWF,CAAX,GAAauB,CAAhC,CAAzD;AACA,WAAOL,MAAP;AACD;;AAEDM,EAAAA,MAAM,GAAE;AACN,wBACE;AAAA,8BACE,QAAC,WAAD;AAAa,QAAA,KAAK,EAAE,GAApB;AAAyB,QAAA,GAAG,EAAE,CAA9B;AAAiC,QAAA,GAAG,EAAE,OAAtC;AAA+C,QAAA,QAAQ,EAAE,WAAzD;AAAsE,QAAA,IAAI,EAAE,GAA5E;AAAiF,QAAA,YAAY,EAAE,KAAKzB;AAApG;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AAAa,QAAA,KAAK,EAAE,GAApB;AAAyB,QAAA,GAAG,EAAE,CAA9B;AAAiC,QAAA,GAAG,EAAE,CAAtC;AAAyC,QAAA,IAAI,EAAE,KAA/C;AAAsD,QAAA,QAAQ,EAAE,cAAhE;AAAgF,QAAA,YAAY,EAAE,KAAKP;AAAnG;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,YAAD;AAAc,QAAA,IAAI,EAAE,KAAKU,KAAL,CAAWC,IAA/B;AACE,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWE,KADpB;AAEE,QAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWG,QAFvB;AAGE,QAAA,UAAU,EAAE,KAAKH,KAAL,CAAWI;AAHzB;AAAA;AAAA;AAAA;AAAA,cAHF,eAQE,QAAC,QAAD;AAAU,QAAA,IAAI,EAAExB;AAAhB;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AApF4B;;AA+FjC,eAAeO,QAAf","sourcesContent":["import Distribution from './Distribution';\nimport React, {Component} from 'react'; \nimport NumberField from '../Components/NumberField';\nimport BarGraph from '../Components/BarGraph';\nimport {choose, factorial} from '../Libraries/Math';\n\nconst gr= {\n  labels: [],\n  datasets: [\n    {\n      backgroundColor: 'rgba(75,192,192, 0.6)',\n      highlightStroke: \"rgba(220,220,220,1)\",\n      borderWidth: 0,\n      data: []\n    }\n  ]\n}\nclass Binomial extends Component {\n    constructor (props) {\n      super(props);\n      this.changeN = this.changeN.bind(this);\n      this.changeP = this.changeP.bind(this);\n\n      this.state={\n        name: \"Binomial\",\n        p: 0,\n        n: 0,\n        media: 0,\n        varianza: 0,\n        desviacion: 0,\n      }\n    }\n\n    componentDidUpdate(_prevProps, prevState) {\n      if (prevState.p !== this.state.p || prevState.n !== this.state.n) {\n        this.setState({\n          media: this.calcularMedia(),\n          varianza: this.calcularVarianza(),\n          desviacion: this.calcularDesviacion(),\n        });\n        gr.labels = Array.from(Array(this.state.n + 1).keys())\n        let _data = this.calcularFuncion();\n\n        gr.datasets = [\n          {\n            backgroundColor: 'rgba(75,192,192, 0.6)',\n            highlightStroke: \"rgba(220,220,220,1)\",\n            borderWidth: 0,\n            data: _data\n          }\n        ]\n      }\n    }\n\n    calcularMedia() {\n      let result = this.state.n * this.state.p;  \n      return result;\n    }\n  \n    calcularVarianza() {\n      let result = this.state.n * this.state.p * (1-this.state.p);  \n      return result;\n    }\n\n    calcularDesviacion(){\n      let result = (this.state.n * this.state.p * (1-this.state.p)) ** (1/2);\n\n      return result;\n    }\n\n    \n    calcularFuncion(){\n      let _data = [];\n\n      for (var i = 0; i <= this.state.n; i++) {\n        let prob = this.calcularProbabilidad(i);\n        _data.push(Number(prob));\n      } \n\n      return _data;\n    }\n\n    calcularProbabilidad(x){\n      let result = choose(this.state.n, x) * this.state.p**x * (1-this.state.p)**(this.state.n-x);\n      return result;\n    }\n\n    render(){\n      return(\n        <div>\n          <NumberField label={\"n\"} min={0} max={9999999} helpText={\"PoblaciÃ³n\"} step={\"1\"} handleChange={this.changeN}/>\n          <NumberField label={\"p\"} min={0} max={1} step={\"0.1\"} helpText={\"Probabilidad\"} handleChange={this.changeP}/>\n          <Distribution name={this.state.name} \n            media={this.state.media} \n            varianza={this.state.varianza}\n            desviacion={this.state.desviacion}\n          />\n          <BarGraph data={gr}/>\n          \n        </div>\n      )\n    }\n\n    changeP = async function(event) {\n      await this.setState({ p: Number(event.target.value) });\n    };\n\n    changeN = async function(event) {\n      await this.setState({ n: Number(event.target.value) });\n    };\n}\n\nexport default Binomial;"]},"metadata":{},"sourceType":"module"}