{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gol_acheron/probability-calculator/src/Distributions/Binomial.js\";\nimport Distribution from './Distribution';\nimport React, { Component } from 'react';\nimport NumberField from '../Components/NumberField';\nimport LineGraph from '../Components/LineGraph';\n\nclass Binomial extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeP = async function (event) {\n      await this.updateState({\n        p: Number(event.target.value)\n      });\n    };\n\n    this.changeN = async function (event) {\n      await this.updateState({\n        n: Number(event.target.value)\n      });\n    };\n\n    this.changeN = this.changeN.bind(this);\n    this.changeP = this.changeP.bind(this);\n    this.state = {\n      name: \"Binomial\",\n      p: 0,\n      n: 0,\n      media: 0,\n      varianza: 0,\n      desviacion: 0,\n      nPoints: 50,\n      labels: [],\n      data: []\n    };\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    if (prevState.p !== this.state.p || prevState.n !== this.state.n) {\n      this.calcularTodo();\n    }\n  }\n\n  calcularTodo() {\n    this.calcularMedia();\n    this.calcularVarianza();\n    this.calcularFuncion();\n  }\n\n  updateState(updates) {\n    this.setState(prevState => {\n      const newState = { ...prevState,\n        ...updates\n      };\n      return { ...newState,\n        media: this.calcularMedia(newState),\n        varianza: this.calcularVarianza(newState),\n        desviacion: this.calcularDesviacion(newState),\n        labels: [],\n        data: []\n      };\n    });\n    this.calcularFuncion(newState);\n  }\n\n  calcularMedia() {\n    let result = Number(this.state.n) * Number(this.state.p);\n    this.setState({\n      media: result\n    });\n  }\n\n  calcularVarianza() {\n    let result = Number(this.state.n) * Number(this.state.p) * (1 - this.state.p);\n    this.setState({\n      media: result\n    });\n  }\n\n  calcularDesviacion(state) {\n    let result = (state.n * state.p * (1 - state.p)) ** (1 / 2);\n    this.setState({\n      desviacion: result\n    });\n  }\n\n  calcularFuncion() {\n    for (var i = 0; i < state.nPoints; i++) {\n      state.labels.push(i);\n      let prob = this.calcularProbabilidad(state, i);\n      state.data.push(prob);\n    }\n  }\n\n  calcularProbabilidad(state, x) {\n    let result = this.choose(state.n, x) * state.p ** x * (1 - state.p) ** (state.n - x);\n  }\n\n  factorial(n) {\n    if (n === 1) {\n      return 1;\n    }\n\n    return n * this.factorial(n - 1);\n  }\n\n  choose(a, b) {\n    let result = this.factorial(a) / (this.factorial(b) * this.factorial(a - b));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NumberField, {\n        label: \"n\",\n        min: 0,\n        max: 9999999,\n        handleChange: this.changeN\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n        label: \"p\",\n        min: 0,\n        max: 1,\n        handleChange: this.changeP\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LineGraph, {\n        _labels: ['a', 'b'],\n        _data: [1, 2]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Distribution, {\n        name: this.state.name,\n        media: this.state.media,\n        varianza: this.state.varianza,\n        desviacion: this.state.desviacion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Binomial;","map":{"version":3,"sources":["/home/gol_acheron/probability-calculator/src/Distributions/Binomial.js"],"names":["Distribution","React","Component","NumberField","LineGraph","Binomial","constructor","props","changeP","event","updateState","p","Number","target","value","changeN","n","bind","state","name","media","varianza","desviacion","nPoints","labels","data","componentDidUpdate","_prevProps","prevState","calcularTodo","calcularMedia","calcularVarianza","calcularFuncion","updates","setState","newState","calcularDesviacion","result","i","push","prob","calcularProbabilidad","x","choose","factorial","a","b","render"],"mappings":"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","sourcesContent":["import Distribution from './Distribution';\nimport React, {Component} from 'react'; \nimport NumberField from '../Components/NumberField';\nimport LineGraph from '../Components/LineGraph'\n\nclass Binomial extends Component {\n    constructor (props) {\n      super(props);\n      this.changeN = this.changeN.bind(this);\n      this.changeP = this.changeP.bind(this);\n\n      this.state={\n        name: \"Binomial\",\n        p: 0,\n        n: 0,\n        media: 0,\n        varianza: 0,\n        desviacion: 0,\n        nPoints: 50,\n        labels: [],\n        data: []\n      }\n    }\n\n    componentDidUpdate(_prevProps, prevState) {\n      if (prevState.p !== this.state.p || prevState.n !== this.state.n) {\n        this.calcularTodo();\n      }\n    }\n\n    calcularTodo() {\n      this.calcularMedia();\n      this.calcularVarianza();\n      this.calcularFuncion();\n    }\n\n    updateState(updates) {\n      this.setState(prevState => {\n        const newState = { ...prevState, ...updates };\n        return {\n          ...newState,\n          media: this.calcularMedia(newState),\n          varianza: this.calcularVarianza(newState),\n          desviacion: this.calcularDesviacion(newState),\n          labels: [],\n          data: []\n        };\n      });\n\n      this.calcularFuncion(newState);\n    }\n\n    calcularMedia() {\n      let result = Number(this.state.n) * Number(this.state.p);  \n      this.setState({ media: result });\n    }\n  \n    calcularVarianza() {\n      let result = Number(this.state.n) * Number(this.state.p) * (1-this.state.p);  \n      this.setState({ media: result });\n    }\n\n    calcularDesviacion(state){\n      let result = (state.n * state.p * (1-state.p)) ** (1/2);\n\n      this.setState({ desviacion: result });\n    }\n\n    calcularFuncion(){\n      for (var i = 0; i < state.nPoints; i++) {\n        state.labels.push(i);\n\n        let prob = this.calcularProbabilidad(state, i);\n        state.data.push(prob);\n      } \n    }\n\n\n    calcularProbabilidad(state, x){\n      let result = this.choose(state.n, x) * state.p**x * (1-state.p)**(state.n-x);\n    }\n\n    factorial(n) {\n      if (n === 1) {\n        return 1;\n      }\n      \n      return n * this.factorial(n - 1);\n    }\n\n    choose(a,b){\n      let result = (this.factorial(a))/(this.factorial(b) * this.factorial(a-b));\n    }\n\n    render(){\n      return(\n        <div>\n          <NumberField label={\"n\"} min={0} max={9999999} handleChange={this.changeN}/>\n          <NumberField label={\"p\"} min={0} max={1} handleChange={this.changeP}/>\n          <LineGraph _labels={['a', 'b']} _data= {[1,2]}/>\n          <Distribution name={this.state.name} \n            media={this.state.media} \n            varianza={this.state.varianza}\n            desviacion={this.state.desviacion}\n          />\n        </div>\n      )\n    }\n\n    changeP = async function(event) {\n      await this.updateState({ p: Number(event.target.value) });\n    };\n  \n    changeN = async function(event) {\n      await this.updateState({ n: Number(event.target.value) });\n    };\n}\n\nexport default Binomial;"]},"metadata":{},"sourceType":"module"}