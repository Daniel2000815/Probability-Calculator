{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gol_acheron/probability-calculator/src/Distributions/Geometrica.js\";\nimport Distribution from './Distribution';\nimport React, { Component } from 'react';\nimport NumberField from '../Components/NumberField';\nimport BarGraph from '../Components/BarGraph';\nimport { choose, factorial } from '../Libraries/MyMath';\nconst gr = {\n  labels: [],\n  datasets: [{\n    backgroundColor: 'rgba(75,192,192, 0.6)',\n    highlightStroke: \"rgba(220,220,220,1)\",\n    borderWidth: 0,\n    data: []\n  }]\n};\n\nclass Geometrica extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeP = async function (event) {\n      await this.setState({\n        p: Number(event.target.value)\n      });\n    };\n\n    this.changePuntos = async function (event) {\n      await this.setState({\n        nPoints: Number(event.target.value)\n      });\n    };\n\n    this.changeP = this.changeP.bind(this);\n    this.changePuntos = this.changePuntos.bind(this);\n    this.state = {\n      name: \"Geométrica\",\n      p: 0,\n      media: 0,\n      varianza: 0,\n      desviacion: 0,\n      nPoints: 0\n    };\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    if (prevState.p !== this.state.p || prevState.nPoints !== this.state.nPoints) {\n      this.setState({\n        media: this.calcularMedia(),\n        varianza: this.calcularVarianza(),\n        desviacion: this.calcularDesviacion()\n      });\n      gr.labels = Array.from(Array(this.state.nPoints).keys());\n\n      let _data = this.calcularFuncion();\n\n      gr.datasets = [{\n        backgroundColor: 'rgba(75,192,192, 0.6)',\n        highlightStroke: \"rgba(220,220,220,1)\",\n        borderWidth: 0,\n        data: _data\n      }];\n    }\n  }\n\n  calcularMedia() {\n    let result = (1 - this.state.p) / this.state.p;\n    return result;\n  }\n\n  calcularVarianza() {\n    let result = (1 - this.state.p) / this.state.p ** 2;\n    return result;\n  }\n\n  calcularDesviacion() {\n    let result = ((1 - this.state.p) / this.state.p ** 2) ** 0.5;\n    return result;\n  }\n\n  calcularFuncion() {\n    let _data = [];\n\n    for (var i = 0; i <= this.state.p * 3; i++) {\n      let prob = this.calcularProbabilidad(i);\n\n      _data.push(Number(prob));\n    }\n\n    return _data;\n  }\n\n  calcularProbabilidad(x) {\n    let result = (1 - this.state.p) ** x * this.state.p;\n    return result;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NumberField, {\n        label: \"p\",\n        min: 0,\n        max: 1,\n        step: \"0.1\",\n        defaultValue: 0,\n        helpText: \"Probabilidad\",\n        handleChange: this.changeP\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Distribution, {\n        name: this.state.name,\n        media: this.state.media,\n        varianza: this.state.varianza,\n        desviacion: this.state.desviacion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(BarGraph, {\n          data: gr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n        label: \"Puntos a calcular\",\n        min: 0,\n        max: 999999,\n        step: \"1\",\n        defaultValue: 0,\n        handleChange: this.changePuntos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Geometrica;","map":{"version":3,"sources":["/home/gol_acheron/probability-calculator/src/Distributions/Geometrica.js"],"names":["Distribution","React","Component","NumberField","BarGraph","choose","factorial","gr","labels","datasets","backgroundColor","highlightStroke","borderWidth","data","Geometrica","constructor","props","changeP","event","setState","p","Number","target","value","changePuntos","nPoints","bind","state","name","media","varianza","desviacion","componentDidUpdate","_prevProps","prevState","calcularMedia","calcularVarianza","calcularDesviacion","Array","from","keys","_data","calcularFuncion","result","i","prob","calcularProbabilidad","push","x","render"],"mappings":"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","sourcesContent":["import Distribution from './Distribution';\nimport React, {Component} from 'react'; \nimport NumberField from '../Components/NumberField';\nimport BarGraph from '../Components/BarGraph';\nimport {choose, factorial} from '../Libraries/MyMath';\n\nconst gr= {\n  labels: [],\n  datasets: [\n    {\n      backgroundColor: 'rgba(75,192,192, 0.6)',\n      highlightStroke: \"rgba(220,220,220,1)\",\n      borderWidth: 0,\n      data: []\n    }\n  ]\n}\nclass Geometrica extends Component {\n    constructor (props) {\n      super(props);\n      this.changeP = this.changeP.bind(this);\n      this.changePuntos = this.changePuntos.bind(this);\n\n      this.state={\n        name: \"Geométrica\",\n        p: 0,\n        media: 0,\n        varianza: 0,\n        desviacion: 0,\n        nPoints: 0\n      }\n    }\n\n    componentDidUpdate(_prevProps, prevState) {\n      if (prevState.p !== this.state.p || prevState.nPoints !== this.state.nPoints) {\n        this.setState({\n          media: this.calcularMedia(),\n          varianza: this.calcularVarianza(),\n          desviacion: this.calcularDesviacion(),\n        });\n        gr.labels = Array.from(Array(this.state.nPoints).keys())\n        let _data = this.calcularFuncion();\n\n        gr.datasets = [\n          {\n            backgroundColor: 'rgba(75,192,192, 0.6)',\n            highlightStroke: \"rgba(220,220,220,1)\",\n            borderWidth: 0,\n            data: _data\n          }\n        ]\n      }\n    }\n\n    calcularMedia() {\n      let result = (1-this.state.p) / this.state.p ;  \n      return result;\n    }\n  \n    calcularVarianza() {\n      let result = (1-this.state.p) / (this.state.p**2) ;  \n      return result;\n    }\n\n    calcularDesviacion(){\n      let result = ((1-this.state.p) / (this.state.p**2))**(0.5) ;  \n      return result;\n    }\n\n    \n    calcularFuncion(){\n      let _data = [];\n\n      for (var i = 0; i <= this.state.p*3; i++) {\n        let prob = this.calcularProbabilidad(i);\n        _data.push(Number(prob));\n      } \n\n      return _data;\n    }\n\n    calcularProbabilidad(x){\n      let result = (1-this.state.p)**x * this.state.p \n      return result;\n    }\n\n    render(){\n      return(\n        <div>\n          <NumberField label={\"p\"} min={0} max={1} step={\"0.1\"} defaultValue={0} helpText={\"Probabilidad\"} handleChange={this.changeP}/>\n          <Distribution name={this.state.name} \n            media={this.state.media} \n            varianza={this.state.varianza}\n            desviacion={this.state.desviacion}\n          />\n          <span> <BarGraph data={gr}/></span>\n          <NumberField label={\"Puntos a calcular\"} min={0} max={999999} step={\"1\"} defaultValue={0} handleChange={this.changePuntos}/>         \n          \n        </div>\n      )\n    }\n\n    changeP = async function(event) {\n      await this.setState({ p: Number(event.target.value) });\n    };\n\n    changePuntos = async function(event) {\n      await this.setState({ nPoints: Number(event.target.value) });\n    };\n\n}\n\nexport default Geometrica;"]},"metadata":{},"sourceType":"module"}