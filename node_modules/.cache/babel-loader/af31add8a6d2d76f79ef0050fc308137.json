{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/gol_acheron/probability-calculator/src/Distributions/Pascal.js\";\nimport Distribution from './Distribution';\nimport React, { Component } from 'react';\nimport NumberField from '../Components/NumberField';\nimport BarGraph from '../Components/BarGraph';\nimport { choose, factorial } from '../Libraries/MyMath';\nimport NumberSlider from '../Components/NumberSlider';\nimport { Slider } from '@material-ui/core';\nconst gr = {\n  labels: [],\n  datasets: [{\n    backgroundColor: 'rgba(75,192,192, 0.6)',\n    highlightStroke: \"rgba(220,220,220,1)\",\n    borderWidth: 0,\n    data: []\n  }]\n};\n\nclass Pascal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeRange = async function (event, value) {\n      await this.setState({\n        probRange: value\n      });\n    };\n\n    this.changeP = async function (event) {\n      await this.setState({\n        p: Number(event.target.value)\n      });\n    };\n\n    this.changePuntos = async function (event, value) {\n      await this.setState({\n        nPoints: Number(value)\n      });\n    };\n\n    this.changeP = this.changeP.bind(this);\n    this.changePuntos = this.changePuntos.bind(this);\n    this.changeRange = this.changeRange.bind(this);\n    this.state = {\n      name: \"Pascal\",\n      descripcion: \"Nº de fracasos HASTA el primer éxito.\",\n      p: 0,\n      media: 0,\n      varianza: 0,\n      desviacion: 0,\n      nPoints: 1,\n      probRange: [0, 0],\n      probabilidad: 0\n    };\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    if (prevState.p !== this.state.p || prevState.nPoints !== this.state.nPoints) {\n      this.setState({\n        media: this.calcularMedia(),\n        varianza: this.calcularVarianza(),\n        desviacion: this.calcularDesviacion()\n      });\n      console.log(this.state.nPoints);\n      gr.labels = Array.from(Array(this.state.nPoints).keys());\n\n      let _data = this.calcularFuncion();\n\n      gr.datasets = [{\n        backgroundColor: 'rgba(75,192,192, 0.6)',\n        highlightStroke: \"rgba(220,220,220,1)\",\n        borderWidth: 0,\n        data: _data\n      }];\n    }\n\n    if (prevState.probRange !== this.state.probRange) {\n      let res = 0;\n      console.log(\"CALCULANDO ENTRE \" + this.state.probRange[0] + \" Y \" + this.state.probRange[1]);\n\n      for (let i = this.state.probRange[0]; i < this.state.probRange[1]; i++) {\n        consolo.log(this.calcularProbabilidad(i));\n        res += this.calcularProbabilidad(i);\n      }\n\n      console.log(\"RES= \" + res);\n      this.setState({\n        probabilidad: res\n      });\n    }\n  }\n\n  calcularMedia() {\n    let result = 1 / this.state.p;\n    return result;\n  }\n\n  calcularVarianza() {\n    let result = (1 - this.state.p) / this.state.p ** 2;\n    return result;\n  }\n\n  calcularDesviacion() {\n    let result = ((1 - this.state.p) / this.state.p ** 2) ** 0.5;\n    return result;\n  }\n\n  calcularFuncion() {\n    let _data = [];\n\n    for (var i = 0; i <= this.state.nPoints; i++) {\n      let prob = this.calcularProbabilidad(i);\n\n      _data.push(Number(prob));\n    }\n\n    return _data;\n  }\n\n  calcularProbabilidad(x) {\n    let result = (1 - this.state.p) ** (x - 1) * this.state.p;\n    return result;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NumberField, {\n        label: \"p\",\n        min: 0,\n        max: 1,\n        step: \"0.1\",\n        defaultValue: 0,\n        helpText: \"Probabilidad éxito\",\n        handleChange: this.changeP\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Distribution, {\n        name: this.state.name,\n        descripcion: this.state.descripcion,\n        media: this.state.media,\n        varianza: this.state.varianza,\n        desviacion: this.state.desviacion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(BarGraph, {\n          data: gr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NumberSlider, {\n          min: 0,\n          max: 40,\n          default: 1,\n          step: 1,\n          handleChange: this.changePuntos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Slider, {\n        min: 0,\n        max: 30,\n        value: this.state.probRange,\n        onChange: this.changeRange,\n        valueLabelDisplay: \"auto\",\n        \"aria-labelledby\": \"range-slider\",\n        valueLabelDisplay: \"on\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"PROB: \", this.state.probabilidad]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Pascal;","map":{"version":3,"sources":["/home/gol_acheron/probability-calculator/src/Distributions/Pascal.js"],"names":["Distribution","React","Component","NumberField","BarGraph","choose","factorial","NumberSlider","Slider","gr","labels","datasets","backgroundColor","highlightStroke","borderWidth","data","Pascal","constructor","props","changeRange","event","value","setState","probRange","changeP","p","Number","target","changePuntos","nPoints","bind","state","name","descripcion","media","varianza","desviacion","probabilidad","componentDidUpdate","_prevProps","prevState","calcularMedia","calcularVarianza","calcularDesviacion","console","log","Array","from","keys","_data","calcularFuncion","res","i","consolo","calcularProbabilidad","result","prob","push","x","render"],"mappings":"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","sourcesContent":["import Distribution from './Distribution';\nimport React, {Component} from 'react'; \nimport NumberField from '../Components/NumberField';\nimport BarGraph from '../Components/BarGraph';\nimport {choose, factorial} from '../Libraries/MyMath';\nimport NumberSlider from '../Components/NumberSlider';\nimport {Slider} from '@material-ui/core';\n\n\nconst gr= {\n  labels: [],\n  datasets: [\n    {\n      backgroundColor: 'rgba(75,192,192, 0.6)',\n      highlightStroke: \"rgba(220,220,220,1)\",\n      borderWidth: 0,\n      data: [],\n    }\n  ]\n}\n\n\nclass Pascal extends Component {\n    constructor (props) {\n      super(props);\n      this.changeP = this.changeP.bind(this);\n      this.changePuntos = this.changePuntos.bind(this);\n      this.changeRange = this.changeRange.bind(this);\n\n      this.state={\n        name: \"Pascal\",\n        descripcion: \"Nº de fracasos HASTA el primer éxito.\",\n        p: 0,\n        media: 0,\n        varianza: 0,\n        desviacion: 0,\n        nPoints: 1,\n        probRange: [0,0],\n        probabilidad: 0\n      }\n    }\n\n    componentDidUpdate(_prevProps, prevState) {\n      if (prevState.p !== this.state.p || prevState.nPoints !== this.state.nPoints) {\n        this.setState({\n          media: this.calcularMedia(),\n          varianza: this.calcularVarianza(),\n          desviacion: this.calcularDesviacion(),\n        });\n        console.log(this.state.nPoints);\n        gr.labels = Array.from(Array(this.state.nPoints).keys())\n        let _data = this.calcularFuncion();\n\n        gr.datasets = [\n          {\n            backgroundColor: 'rgba(75,192,192, 0.6)',\n            highlightStroke: \"rgba(220,220,220,1)\",\n            borderWidth: 0,\n            data: _data\n          }\n        ]\n      }\n\n      if(prevState.probRange !== this.state.probRange){\n        let res = 0;\n        console.log(\"CALCULANDO ENTRE \" + this.state.probRange[0] + \" Y \" + this.state.probRange[1]);\n        for(let i=this.state.probRange[0]; i<this.state.probRange[1]; i++){\n          consolo.log(this.calcularProbabilidad(i))\n          res += this.calcularProbabilidad(i);\n        }\n        console.log(\"RES= \" + res );\n        this.setState({\n          probabilidad: res\n        })\n      }\n    }\n\n    calcularMedia() {\n      let result = 1 / this.state.p ;  \n      return result;\n    }\n  \n    calcularVarianza() {\n      let result = (1-this.state.p) / (this.state.p**2) ;  \n      return result;\n    }\n\n    calcularDesviacion(){\n      let result = ((1-this.state.p) / (this.state.p**2))**(0.5) ;  \n      return result;\n    }\n\n    \n    calcularFuncion(){\n      let _data = [];\n\n      for (var i = 0; i <= this.state.nPoints; i++) {\n        let prob = this.calcularProbabilidad(i);\n        _data.push(Number(prob));\n      } \n\n      return _data;\n    }\n\n    calcularProbabilidad(x){\n      let result = (1-this.state.p)**(x-1) * this.state.p \n      return result;\n    }\n\n    render(){\n\n\n      return(\n        <div>\n          <NumberField label={\"p\"} min={0} max={1} step={\"0.1\"} defaultValue={0} helpText={\"Probabilidad éxito\"} handleChange={this.changeP}/>\n          <Distribution name={this.state.name} \n            descripcion={this.state.descripcion}\n            media={this.state.media} \n            varianza={this.state.varianza}\n            desviacion={this.state.desviacion}\n          />\n\n          <>\n          <BarGraph data={gr}/>\n          <NumberSlider min={0} max={40} default={1} step={1} handleChange={this.changePuntos}/>\n          </>\n\n          <Slider\n            min={0}\n            max={30}\n            value={this.state.probRange}\n            onChange={this.changeRange}\n            valueLabelDisplay=\"auto\"\n            aria-labelledby=\"range-slider\"\n            valueLabelDisplay=\"on\"\n        />\n        <p>PROB: {this.state.probabilidad}</p>\n\n\n        </div>\n      )\n    }\n\n    changeRange = async function(event, value) {\n      await this.setState({ probRange: value });\n    };\n\n    changeP = async function(event) {\n      await this.setState({ p: Number(event.target.value) });\n    };\n\n    changePuntos = async function(event, value) {\n      await this.setState({ nPoints: Number(value) });\n    };\n\n}\n\nexport default Pascal;"]},"metadata":{},"sourceType":"module"}